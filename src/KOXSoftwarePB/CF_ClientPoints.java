/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package KOXSoftwarePB;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.table.DefaultTableModel;



/**
 *
 * Ramka słuząca do wyszukiwania studentów
 */
public class CF_ClientPoints extends javax.swing.JFrame {

/**
 *
 * Konstruktor tworzacy nową ramke
 */
    public CF_ClientPoints() {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        ClientPoints_ShowData_Button1.setVisible(false);
        
        
        
    }
    /**
     * Metoda służąca do przeszukiwania studentow 
     * @param cnx Obiekt połącznia z bazą
     * @param model Tabela do wyświetlania danych
     * @param i Licznik, zmienna służaca dodawaniu kolejnych wierszy
     * @param fromInt Zmienna przechowująca id Studenta
     * @param sqlQuery Zmienna przechowująca kwerendę
     * @param what Zmienna przechowująca typ pola po którym wyszukujemy wartość
     * @param fromString Zmienna przechowujaca kryterium wyszukiwania
     * @param stmt Sluzy do wykonania kwerendy
     * @param rs Słuzy do przechowywania rezultatów kwerendy
     * @throws e Sprawdzenie czy połączenie z bazą przebiegło pomyslnie
     */
    public void PokazywanieKlienta(DefaultTableModel model) throws Exception{
        Connection myConn = MySQLConnection.getConnection();
        String what = "";
        int fromInt=1;
        String fromString="";
        String sqlQuery="";
        int cardNumberTemp=0;
        String nameTemp="";
        String surnameTemp="";
        int pointsTemp=0;
        try {
                fromInt = Integer.parseInt(ClientPoints_Value_Text.getText());
            }
        catch(NumberFormatException e) {
			showMessageDialog(null,"To nie jest liczba!");                        
                        ClientPoints_Value_Text.setText("");
                        return;
		}
        what="klienci.KLI_CARD_NUMBER";
        sqlQuery="SELECT KLI_CARD_NUMBER,KLI_NAME,KLI_SURNAME,KLI_POINTS FROM klienci WHERE "+what+" LIKE '"+fromInt+"' ;";
        
        try (Statement stmt = myConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
          ResultSet rs = stmt.executeQuery(sqlQuery)) {
            if (rs.next()==false){
                showMessageDialog(null,"Brak KLIENTA pasującego do podanych kryteriów");
                return;
            }
            rs.beforeFirst();
          while (rs.next()) {
            model.addRow(new Object[6]);
            cardNumberTemp=rs.getInt("KLI_CARD_NUMBER");
            nameTemp=rs.getString("KLI_NAME");
            surnameTemp=rs.getString("KLI_SURNAME");
            pointsTemp=rs.getInt("KLI_POINTS");
            ClientPoints_ClientData_Table.setValueAt(cardNumberTemp, 0, 0);
            ClientPoints_ClientData_Table.setValueAt(nameTemp, 0, 1);
            ClientPoints_ClientData_Table.setValueAt(surnameTemp, 0, 2);
            ClientPoints_ClientData_Table.setValueAt(pointsTemp, 0, 3);
            ClientPoints_ShowData_Button1.setVisible(true);

        }
         } catch (SQLException e) {
               showMessageDialog(null, "Problem z polaczeniem");
    }
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ClientFind_Header = new javax.swing.JLabel();
        ClientPoints_Header_Label = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ClientPoints_Value_Text = new javax.swing.JTextPane();
        ClientPoints_Header2_Label = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ClientPoints_ClientData_Table = new javax.swing.JTable();
        ClientPoints_NoChanges_Button = new javax.swing.JButton();
        ClientPoints_Close_Button = new javax.swing.JButton();
        ClientPoints_ShowData_Button = new javax.swing.JButton();
        ClientPoints_ShowData_Button1 = new javax.swing.JButton();
        ClientPoints_Header_Label1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ClientPoints_PBON_Text = new javax.swing.JTextPane();
        ClientPoints_Header_Label3 = new javax.swing.JLabel();
        ClientPoints_Options_ComboBox1 = new javax.swing.JComboBox();
        ClientPoints_Header_Label2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        ClientPoints_LPG_Text = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ClientFind_Header.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        ClientFind_Header.setForeground(new java.awt.Color(255, 153, 153));
        ClientFind_Header.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ClientFind_Header.setText("Stacja paliw");
        ClientFind_Header.setToolTipText("");

        ClientPoints_Header_Label.setFont(new java.awt.Font("Monospaced", 3, 18)); // NOI18N
        ClientPoints_Header_Label.setForeground(new java.awt.Color(0, 204, 204));
        ClientPoints_Header_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ClientPoints_Header_Label.setText("Podaj numer karty");

        jScrollPane1.setViewportView(ClientPoints_Value_Text);

        ClientPoints_Header2_Label.setFont(new java.awt.Font("Monospaced", 3, 18)); // NOI18N
        ClientPoints_Header2_Label.setForeground(new java.awt.Color(0, 204, 204));
        ClientPoints_Header2_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ClientPoints_Header2_Label.setText("Wyniki wyszkiwania");

        ClientPoints_ClientData_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Numer_karty", "Imie", "Nazwisko", "Punkty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(ClientPoints_ClientData_Table);
        if (ClientPoints_ClientData_Table.getColumnModel().getColumnCount() > 0) {
            ClientPoints_ClientData_Table.getColumnModel().getColumn(0).setResizable(false);
            ClientPoints_ClientData_Table.getColumnModel().getColumn(1).setResizable(false);
            ClientPoints_ClientData_Table.getColumnModel().getColumn(2).setResizable(false);
        }

        ClientPoints_NoChanges_Button.setBackground(new java.awt.Color(255, 0, 0));
        ClientPoints_NoChanges_Button.setText("Wróc do menu głownego");
        ClientPoints_NoChanges_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientPoints_NoChanges_ButtonActionPerformed(evt);
            }
        });

        ClientPoints_Close_Button.setBackground(new java.awt.Color(255, 0, 0));
        ClientPoints_Close_Button.setText("Wyłącz program");
        ClientPoints_Close_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientPoints_Close_ButtonActionPerformed(evt);
            }
        });

        ClientPoints_ShowData_Button.setBackground(new java.awt.Color(255, 255, 102));
        ClientPoints_ShowData_Button.setText("Sprawdź klienta");
        ClientPoints_ShowData_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientPoints_ShowData_ButtonActionPerformed(evt);
            }
        });

        ClientPoints_ShowData_Button1.setBackground(new java.awt.Color(255, 255, 102));
        ClientPoints_ShowData_Button1.setText("Dodaj punkty");
        ClientPoints_ShowData_Button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientPoints_ShowData_Button1ActionPerformed(evt);
            }
        });

        ClientPoints_Header_Label1.setFont(new java.awt.Font("Monospaced", 3, 18)); // NOI18N
        ClientPoints_Header_Label1.setForeground(new java.awt.Color(0, 204, 204));
        ClientPoints_Header_Label1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ClientPoints_Header_Label1.setText("Ilość zakupionego PB/ON");

        jScrollPane3.setViewportView(ClientPoints_PBON_Text);

        ClientPoints_Header_Label3.setFont(new java.awt.Font("Monospaced", 3, 18)); // NOI18N
        ClientPoints_Header_Label3.setForeground(new java.awt.Color(0, 204, 204));
        ClientPoints_Header_Label3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        ClientPoints_Header_Label3.setText("Dodatkowe usługi  ");

        ClientPoints_Options_ComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Brak", "Mycie", "Mycie z woskowaniem" }));
        ClientPoints_Options_ComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientPoints_Options_ComboBox1ActionPerformed(evt);
            }
        });

        ClientPoints_Header_Label2.setFont(new java.awt.Font("Monospaced", 3, 18)); // NOI18N
        ClientPoints_Header_Label2.setForeground(new java.awt.Color(0, 204, 204));
        ClientPoints_Header_Label2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ClientPoints_Header_Label2.setText("Ilość zakupionego LPG");

        jScrollPane4.setViewportView(ClientPoints_LPG_Text);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ClientFind_Header, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ClientPoints_Header2_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addComponent(ClientPoints_Header_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ClientPoints_ShowData_Button))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(8, 8, 8)
                                    .addComponent(ClientPoints_Header_Label2, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jScrollPane4))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(ClientPoints_Header_Label1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(ClientPoints_Header_Label3, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(ClientPoints_ShowData_Button1)
                                        .addComponent(ClientPoints_Options_ComboBox1, 0, 98, Short.MAX_VALUE)
                                        .addComponent(jScrollPane3)))))
                        .addGap(0, 112, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ClientPoints_Close_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ClientPoints_NoChanges_Button, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(ClientFind_Header, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(ClientPoints_Header_Label, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                        .addComponent(jScrollPane1))
                    .addComponent(ClientPoints_ShowData_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ClientPoints_Header2_Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(ClientPoints_NoChanges_Button, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ClientPoints_Close_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ClientPoints_Header_Label1, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                            .addComponent(jScrollPane3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ClientPoints_Header_Label2)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ClientPoints_Header_Label3)
                            .addComponent(ClientPoints_Options_ComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(ClientPoints_ShowData_Button1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Metoda sluząca wyjściu z ramki
     */
    private void ClientPoints_NoChanges_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientPoints_NoChanges_ButtonActionPerformed
        new  CF_MainMenuAdmin().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_ClientPoints_NoChanges_ButtonActionPerformed
    /**
     * Metoda sluząca zakończeniu działania aplikacji
     */
    private void ClientPoints_Close_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientPoints_Close_ButtonActionPerformed
        Runtime.getRuntime().exit(0);
    }//GEN-LAST:event_ClientPoints_Close_ButtonActionPerformed
     /**
     * Metoda pośrednicząca w przeszukiwaniu studentów
     * @param n Wzór tabeli
     * @param model Tabela do wyświetlania wyników
     * @param cnx Obiekt do połącznia z bazą
     */
    private void ClientPoints_ShowData_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientPoints_ShowData_ButtonActionPerformed
        String n[]={"Numer_karty","Imie","Nazwisko","Punkty"};
        DefaultTableModel model=new DefaultTableModel(null,n);
        ClientPoints_ClientData_Table.setModel(model);
        try {
            PokazywanieKlienta(model);
        } catch (Exception ex) {
            Logger.getLogger(CF_ClientPoints.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ClientPoints_ShowData_ButtonActionPerformed

    private void ClientPoints_ShowData_Button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientPoints_ShowData_Button1ActionPerformed
        int fromInt= Integer.parseInt(ClientPoints_Value_Text.getText());
        int FuelBought=0;
        int LPGBought=0;
        if ("".equals(ClientPoints_PBON_Text.getText())==false)
        {
        try {
                
                FuelBought= Integer.parseInt(ClientPoints_PBON_Text.getText());
            }
        catch(NumberFormatException e) {
			showMessageDialog(null,"PB/ON - To nie jest liczba!");                        
                        ClientPoints_PBON_Text.setText("");
                        return;
		}
        }
        if ("".equals(ClientPoints_LPG_Text.getText())==false)
        {
        try {
                LPGBought= Integer.parseInt(ClientPoints_LPG_Text.getText());
            }
        catch(NumberFormatException e) {
			showMessageDialog(null,"LPG - To nie jest liczba!");                        
                        ClientPoints_LPG_Text.setText("");
                        return;
		}
        }
        int Bonus=0;
        int currentPoints=0;
        String Input=(String) ClientPoints_Options_ComboBox1.getSelectedItem();
        switch(Input){
            case "Brak":
               Bonus+=0;
               break;
            case "Mycie":
               Bonus+=5;
               break;
            case "Mycie z woskowaniem":
               Bonus+=10;
               break;
        }
        
        Connection myConn;
        try {
            myConn = MySQLConnection.getConnection();
            Statement stmt = myConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            
            String sqlQuery3="SELECT * FROM klienci WHERE KLI_CARD_NUMBER="+fromInt+"";
            ResultSet rs = stmt.executeQuery(sqlQuery3);
            if (rs.first()==false){
                showMessageDialog(null,"Brak KLIENTA o danym id");
                return;
            }
            rs.beforeFirst();
            while (rs.next()) {
                currentPoints=rs.getInt("KLI_POINTS");
            }
            int pointsToAdd=currentPoints+FuelBought*2+LPGBought*1+Bonus;
            String sqlQuery="UPDATE klienci SET KLI_POINTS ="+pointsToAdd+" WHERE KLI_CARD_NUMBER="+fromInt+";";
            stmt = myConn.createStatement();
            stmt.executeUpdate(sqlQuery);
            showMessageDialog(null,"Pomyślnie dodano punkty");
            String n[]={"Numer karty","Imie","Nazwisko","Pesel","Login","Hasło"};
            DefaultTableModel model=new DefaultTableModel(null,n);
            ClientPoints_ShowData_Button1.setVisible(false);
            PokazywanieKlienta(model);
            ClientPoints_Value_Text.setText("");
            ClientPoints_PBON_Text.setText("");
            ClientPoints_LPG_Text.setText("");
            
        } catch (Exception ex) {
            Logger.getLogger(CF_ClientEdit.class.getName()).log(Level.SEVERE, null, ex);
            showMessageDialog(null, "Nie można połączyć z bazą");
        }// TODO add your handling code here:
    }//GEN-LAST:event_ClientPoints_ShowData_Button1ActionPerformed

    private void ClientPoints_Options_ComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientPoints_Options_ComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ClientPoints_Options_ComboBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CF_ClientPoints.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CF_ClientPoints.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CF_ClientPoints.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CF_ClientPoints.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ClientFind_Header;
    public javax.swing.JTable ClientPoints_ClientData_Table;
    private javax.swing.JButton ClientPoints_Close_Button;
    private javax.swing.JLabel ClientPoints_Header2_Label;
    private javax.swing.JLabel ClientPoints_Header_Label;
    private javax.swing.JLabel ClientPoints_Header_Label1;
    private javax.swing.JLabel ClientPoints_Header_Label2;
    private javax.swing.JLabel ClientPoints_Header_Label3;
    private javax.swing.JTextPane ClientPoints_LPG_Text;
    private javax.swing.JButton ClientPoints_NoChanges_Button;
    private javax.swing.JComboBox ClientPoints_Options_ComboBox1;
    private javax.swing.JTextPane ClientPoints_PBON_Text;
    private javax.swing.JButton ClientPoints_ShowData_Button;
    private javax.swing.JButton ClientPoints_ShowData_Button1;
    private javax.swing.JTextPane ClientPoints_Value_Text;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}
